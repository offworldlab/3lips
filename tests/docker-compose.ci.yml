version: '3.8'

networks:
  3lips-ci:
    driver: bridge

services:
  api:
    build:
      context: ..
      dockerfile: ./api/Dockerfile
    image: 3lips-api-ci
    ports:
      - "5000:5000"
    networks:
      - 3lips-ci
    volumes:
      - ../config:/app/config
      - ../common:/app/common
    container_name: 3lips-api-ci
    environment:
      - RADAR_NAMES=mock-radar1,mock-radar2
      - RADAR_URLS=http://mock-radar:8001,http://mock-radar:8002
      - MAP_LATITUDE=37.7749
      - MAP_LONGITUDE=-122.4194
      - MAP_CENTER_WIDTH=50000
      - MAP_CENTER_HEIGHT=40000
      - TAR1090_URL=mock-radar:8003
    depends_on:
      - event
      - mock-radar

  event:
    build:
      context: ../event
      dockerfile: Dockerfile
    image: 3lips-event-ci
    networks:
      - 3lips-ci
    volumes:
      - ../config:/app/config
      - ../common:/app/common
      - ../save:/app/save
    container_name: 3lips-event-ci
    environment:
      - RADAR_NAMES=mock-radar1,mock-radar2
      - RADAR_URLS=http://mock-radar:8001,http://mock-radar:8002
      - TAR1090_URL=mock-radar:8003

  cesium-apache:
    build:
      context: ../cesium
      dockerfile: Dockerfile
    image: cesium-apache-ci
    ports:
      - "8080:8080"
    networks:
      - 3lips-ci
    container_name: 3lips-cesium-ci

  # Mock service to replace external dependencies
  mock-radar:
    image: nginx:alpine
    ports:
      - "8001:8001"
      - "8002:8002" 
      - "8003:8003"
    networks:
      - 3lips-ci
    container_name: mock-radar-ci
    volumes:
      - ./mocks:/usr/share/nginx/html
    command: |
      sh -c "
      # Create mock API responses
      mkdir -p /usr/share/nginx/html
      echo '{\"status\":\"ok\",\"message\":\"Mock radar service\"}' > /usr/share/nginx/html/index.html
      echo '{\"detections\":[],\"timestamp\":$(date +%s)}' > /usr/share/nginx/html/api.json
      echo '{\"aircraft\":[],\"timestamp\":$(date +%s)}' > /usr/share/nginx/html/data.json
      
      # Start nginx with custom config
      cat > /etc/nginx/conf.d/default.conf << 'EOF'
      server {
          listen 8001;
          location / { return 200 '{\"detections\":[],\"timestamp\":$(date +%s)}\n'; add_header Content-Type application/json; }
      }
      server {
          listen 8002;
          location / { return 200 '{\"detections\":[],\"timestamp\":$(date +%s)}\n'; add_header Content-Type application/json; }
      }
      server {
          listen 8003;
          location / { return 200 '{\"aircraft\":[],\"timestamp\":$(date +%s)}\n'; add_header Content-Type application/json; }
      }
      EOF
      
      nginx -g 'daemon off;'
      "